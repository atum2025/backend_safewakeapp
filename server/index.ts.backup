import "dotenv/config"; // Só esse já basta, remove o outro
import express, { type Request, Response, NextFunction } from "express";
import cors from "cors";
app.use(cors());
import { registerRoutes } from "./routes";
import { neon } from "@neondatabase/serverless";

// ✅ Verificação de variável de ambiente
if (!process.env.NEON_DB_URL) {
  throw new Error("A variável de ambiente NEON_DB_URL não está configurada.");
}

// ✅ Conexão com Neon usando a variável certa
const sql = neon(process.env.NEON_DB_URL!); // Corrigido aqui!

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// 🔁 Ping simples
app.get("/ping", (_req, res) => {
  res.send("pong 🏓");
});

// ✅ Teste de conexão com o banco
app.get("/health", async (_req, res) => {
  try {
    await sql`SELECT 1`;
    res.status(200).send("✅ Database connected!");
  } catch (err) {
    console.error("Erro no /health:", err);
    res.status(500).send("❌ Database connection failed");
  }
});

// ⏱️ Log de performance das rotas
app.use((req, res, next) => {
  const start = Date.now();
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (req.path.startsWith("/api")) {
      console.log(`${req.method} ${req.path} ${res.statusCode} in ${duration}ms`);
    }
  });
  next();
});

// 🔗 Rotas da API
registerRoutes(app).catch((err) => {
  console.error("Erro ao registrar rotas:", err);
});

// 🧯 Middleware de erro padrão
app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
  const status = err.status || err.statusCode || 500;
  const message = err.message || "Internal Server Error";
  res.status(status).json({ message });
});

// 🚀 Inicialização do servidor
app.listen(3000, () => {
  console.log("🚀 Server listening on http://localhost:3000");
});
