import { db } from "../db";
import { alarmConfigs } from "../../shared/schema";
import { eq } from "drizzle-orm";

function log(msg: string) {
  const now = new Date().toLocaleString("pt-BR", { timeZone: "America/Sao_Paulo" });
  console.log(`[${now}] ${msg}`);
}

async function checkAlarms() {
  try {
    const now = new Date();

    const alarms = await db.select().from(alarmConfigs);
    log(`‚è±Ô∏è Iniciando verifica√ß√£o de ${alarms.length} alarmes...`);

    for (const alarm of alarms) {
      const { id, userId, nextAlarm, intervalHours } = alarm;

      if (!nextAlarm || !intervalHours || intervalHours < 1 || intervalHours > 24) {
        log(`‚ö†Ô∏è Alarme ${id} de usu√°rio ${userId} tem dados inv√°lidos. Pulando...`);
        continue;
      }

      const next = new Date(nextAlarm);

      if (now > next) {
        // Calcula quantas repeti√ß√µes se passaram
        const msPassed = now.getTime() - next.getTime();
        const intervalMs = intervalHours * 60 * 60 * 1000;
        const repetitionsMissed = Math.floor(msPassed / intervalMs) + 1;

        const newNextAlarm = new Date(next.getTime() + repetitionsMissed * intervalMs);

        await db
          .update(alarmConfigs)
          .set({ nextAlarm: newNextAlarm })
          .where(eq(alarmConfigs.id, id));

        log(`üîÅ Alarme ${id} atualizado: novo nextAlarm ‚Üí ${newNextAlarm.toISOString()}`);
      } else {
        log(`‚è© Alarme ${id} ainda est√° no futuro (${next.toISOString()}).`);
      }
    }

    log("‚úÖ Verifica√ß√£o finalizada.");
    process.exit(0);
  } catch (err) {
    console.error("‚ùå Erro durante a verifica√ß√£o de alarmes:", err);
    process.exit(1);
  }
}

checkAlarms();
