import { db } from "../db";
import { alarmConfigs } from "../../shared/schema";
import { eq, lt } from "drizzle-orm";
import dayjs from "dayjs";
import axios from "axios";

async function checkAlarms() {
  const now = new Date();
  console.log("⌛ Agora:", now.toISOString());

  const expiredAlarms = await db
    .select()
    .from(alarmConfigs)
    .where(lt(alarmConfigs.nextAlarm, now));

  console.log("🔍 Alarmes atrasados encontrados:", expiredAlarms.length);

  if (expiredAlarms.length === 0) {
    const all = await db.select().from(alarmConfigs);
    console.log("📦 Todos os alarmes existentes:");
    console.table(
      all.map((a) => ({
        id: a.id,
        userId: a.userId,
        nextAlarm: a.nextAlarm.toISOString(),
      }))
    );
  }

  for (const alarm of expiredAlarms) {
    console.log(`⏰ Alarme do user ${alarm.userId} está atrasado!`);

    await axios.post("http://localhost:3000/api/send-emergency", {
      userId: alarm.userId,
    });

    const newNextAlarm = dayjs(alarm.nextAlarm)
      .add(alarm.repeatInterval, "hour")
      .toISOString();

    await db
      .update(alarmConfigs)
      .set({ nextAlarm: new Date(newNextAlarm) })
      .where(eq(alarmConfigs.id, alarm.id));

    console.log(`🕐 Próximo alarme agendado para ${newNextAlarm}`);
  }
}

checkAlarms()
  .then(() => {
    console.log("🔁 Verificação concluída.");
    process.exit(0);
  })
  .catch((err) => {
    console.error("Erro ao verificar alarmes:", err);
    process.exit(1);
  });
