import l from"express";import{createServer as A}from"http";import{pgTable as j,serial as I,text as m,integer as C,boolean as N,timestamp as S}from"drizzle-orm/pg-core";import{createInsertSchema as E}from"drizzle-zod";import{ZodError as f}from"zod";import{fromZodError as y}from"zod-validation-error";import b from"fs";import v,{resolve as h}from"path";import{defineConfig as _,createLogger as D,createServer as $}from"vite";import{fileURLToPath as L}from"url";import{nanoid as T}from"nanoid";import{drizzle as z}from"drizzle-orm/neon-http";import{neon as M}from"@neondatabase/serverless";class P{constructor(){this.users=new Map,this.emergencyContacts=new Map,this.alarmConfigs=new Map,this.currentUserId=1,this.currentContactId=1,this.currentConfigId=1}async getUser(s){return this.users.get(s)}async getUserByEmail(s){return Array.from(this.users.values()).find(r=>r.email.toLowerCase()===s.toLowerCase())}async createUser(s){const r=this.currentUserId++,t={...s,id:r};return this.users.set(r,t),t}async updateUser(s,r){const t=this.users.get(s);if(!t)return;const e={...t,...r};return this.users.set(s,e),e}async getEmergencyContact(s){return Array.from(this.emergencyContacts.values()).find(r=>r.userId===s)}async createEmergencyContact(s){const r=await this.getEmergencyContact(s.userId);r&&this.emergencyContacts.delete(r.id);const t=this.currentContactId++,e={...s,id:t};return this.emergencyContacts.set(t,e),e}async updateEmergencyContact(s,r){const t=this.emergencyContacts.get(s);if(!t)return;const e={...t,...r};return this.emergencyContacts.set(s,e),e}async getAlarmConfig(s){return Array.from(this.alarmConfigs.values()).find(r=>r.userId===s)}async createAlarmConfig(s){const r=await this.getAlarmConfig(s.userId);r&&this.alarmConfigs.delete(r.id);const t=this.currentConfigId++,e={...s,id:t};return this.alarmConfigs.set(t,e),e}async updateAlarmConfig(s,r){const t=this.alarmConfigs.get(s);if(!t)return;const e={...t,...r};return this.alarmConfigs.set(s,e),e}}const u=new P,R=j("users",{id:I("id").primaryKey(),email:m("email").notNull().unique(),password:m("password").notNull(),fullName:m("full_name").notNull(),whatsapp:m("whatsapp").notNull(),birthdate:m("birthdate").notNull(),country:m("country").notNull().default("Brasil")}),k=E(R).pick({email:!0,password:!0,fullName:!0,whatsapp:!0,birthdate:!0,country:!0}),B=j("emergency_contacts",{id:I("id").primaryKey(),userId:C("user_id").notNull(),name:m("name").notNull(),whatsapp:m("whatsapp").notNull()}),F=E(B).pick({userId:!0,name:!0,whatsapp:!0}),W=j("alarm_configs",{id:I("id").primaryKey(),userId:C("user_id").notNull(),time:m("time").notNull().default("08:00"),repeatInterval:C("repeat_interval").notNull().default(12),ringtone:m("ringtone").notNull().default("alarme1"),isActive:N("is_active").notNull().default(!0),nextAlarm:S("next_alarm").notNull()}),O=E(W).pick({userId:!0,time:!0,repeatInterval:!0,ringtone:!0,isActive:!0,nextAlarm:!0});async function K(n){return n.post("/api/register",async(r,t)=>{try{const e=k.parse(r.body),a=r.body.emergencyContact;if(await u.getUserByEmail(e.email))return t.status(400).json({message:"Email já cadastrado"});const c=await u.createUser(e),i={userId:c.id,time:"08:00",repeatInterval:12,ringtone:"alarme1",isActive:!0,nextAlarm:new Date};await u.createAlarmConfig(i),a&&a.name&&a.whatsapp&&await u.createEmergencyContact({userId:c.id,name:a.name,whatsapp:a.whatsapp});const{password:g,...p}=c;return t.status(201).json(p)}catch(e){return e instanceof f?t.status(400).json({message:y(e).message}):t.status(500).json({message:"Erro ao criar usuário"})}}),n.post("/api/login",async(r,t)=>{try{const{email:e,password:a}=r.body;if(!e||!a)return t.status(400).json({message:"Email e senha são obrigatórios"});const o=await u.getUserByEmail(e);if(!o||o.password!==a)return t.status(401).json({message:"Email ou senha incorretos"});const{password:c,...i}=o;return t.json(i)}catch{return t.status(500).json({message:"Erro ao realizar login"})}}),n.post("/api/emergency-contact",async(r,t)=>{try{const e=F.parse(r.body),a=await u.createEmergencyContact(e);return t.status(201).json(a)}catch(e){return e instanceof f?t.status(400).json({message:y(e).message}):t.status(500).json({message:"Erro ao criar contato de emergência"})}}),n.get("/api/emergency-contact/:userId",async(r,t)=>{try{const e=parseInt(r.params.userId),a=await u.getEmergencyContact(e);return a?t.json(a):t.status(404).json({message:"Contato de emergência não encontrado"})}catch{return t.status(500).json({message:"Erro ao buscar contato de emergência"})}}),n.put("/api/emergency-contact/:id",async(r,t)=>{try{const e=parseInt(r.params.id),a=r.body,o=await u.updateEmergencyContact(e,a);return o?t.json(o):t.status(404).json({message:"Contato de emergência não encontrado"})}catch{return t.status(500).json({message:"Erro ao atualizar contato de emergência"})}}),n.post("/api/alarm-config",async(r,t)=>{try{const e=O.parse(r.body),a=await u.createAlarmConfig(e);return t.status(201).json(a)}catch(e){return e instanceof f?t.status(400).json({message:y(e).message}):t.status(500).json({message:"Erro ao criar configuração de alarme"})}}),n.get("/api/alarm-config/:userId",async(r,t)=>{try{const e=parseInt(r.params.userId),a=await u.getAlarmConfig(e);return a?t.json(a):t.status(404).json({message:"Configuração de alarme não encontrada"})}catch{return t.status(500).json({message:"Erro ao buscar configuração de alarme"})}}),n.put("/api/alarm-config/:id",async(r,t)=>{try{const e=parseInt(r.params.id),a=r.body,o=await u.updateAlarmConfig(e,a);return o?t.json(o):t.status(404).json({message:"Configuração de alarme não encontrada"})}catch{return t.status(500).json({message:"Erro ao atualizar configuração de alarme"})}}),n.get("/api/user/:id",async(r,t)=>{try{const e=parseInt(r.params.id),a=await u.getUser(e);if(!a)return t.status(404).json({message:"Usuário não encontrado"});const{password:o,...c}=a;return t.json(c)}catch{return t.status(500).json({message:"Erro ao buscar usuário"})}}),n.put("/api/user/:id",async(r,t)=>{try{const e=parseInt(r.params.id),a=r.body,o=await u.updateUser(e,a);if(!o)return t.status(404).json({message:"Usuário não encontrado"});const{password:c,...i}=o;return t.json(i)}catch{return t.status(500).json({message:"Erro ao atualizar usuário"})}}),n.post("/api/send-emergency",async(r,t)=>{try{const{userId:e}=r.body;if(!e)return t.status(400).json({message:"ID do usuário é obrigatório"});const a=await u.getUser(parseInt(e)),o=await u.getEmergencyContact(parseInt(e));return!a||!o?t.status(404).json({message:a?"Contato de emergência não encontrado":"Usuário não encontrado"}):t.json({success:!0,message:`Mensagem de emergência enviada para ${o.name} em ${o.whatsapp}`})}catch{return t.status(500).json({message:"Erro ao enviar mensagem de emergência"})}}),A(n)}const w=L(new URL(".",import.meta.url)),H=_({build:{outDir:"dist",emptyOutDir:!0,minify:!0,target:"es2020",ssr:"server/index.ts",rollupOptions:{input:{index:h(w,"server/index.ts"),routes:h(w,"server/routes.ts")},external:["@neondatabase/serverless","zod-validation-error"],output:{format:"es",entryFileNames:"[name].js"}}},resolve:{alias:{"@shared":h(w,"./shared")}}}),x=D();function U(n,s="express"){const r=new Date().toLocaleTimeString("en-US",{hour:"numeric",minute:"2-digit",second:"2-digit",hour12:!0});console.log(`${r} [${s}] ${n}`)}async function J(n,s){const r={middlewareMode:!0,hmr:{server:s},allowedHosts:!0},t=await $({...H,configFile:!1,customLogger:{...x,error:(e,a)=>{x.error(e,a),process.exit(1)}},server:r,appType:"custom"});n.use(t.middlewares),n.use("*",async(e,a,o)=>{const c=e.originalUrl;try{const i=v.resolve(import.meta.dirname,"..","client","index.html");let g=await b.promises.readFile(i,"utf-8");g=g.replace('src="/src/main.tsx"',`src="/src/main.tsx?v=${T()}"`);const p=await t.transformIndexHtml(c,g);a.status(200).set({"Content-Type":"text/html"}).end(p)}catch(i){t.ssrFixStacktrace(i),o(i)}})}function Z(n){const s=v.resolve(import.meta.dirname,"public");if(!b.existsSync(s))throw new Error(`Could not find the build directory: ${s}, make sure to build the client first`);n.use(l.static(s)),n.use("*",(r,t)=>{t.sendFile(v.resolve(s,"index.html"))})}const q=M(process.env.DATABASE_URL),V=z(q),d=l();d.use(l.json());d.use(l.urlencoded({extended:!1}));d.get("/ping",(n,s)=>{s.send("pong 🏓")});d.get("/health",async(n,s)=>{try{await V.execute("SELECT 1"),s.status(200).send("✅ Database connected!")}catch(r){console.error("Erro no /health:",r),s.status(500).send("❌ Database connection failed")}});d.use((n,s,r)=>{const t=Date.now(),e=n.path;let a;const o=s.json;s.json=function(c,...i){return a=c,o.apply(s,[c,...i])},s.on("finish",()=>{const c=Date.now()-t;if(e.startsWith("/api")){let i=`${n.method} ${e} ${s.statusCode} in ${c}ms`;a&&(i+=` :: ${JSON.stringify(a)}`),i.length>80&&(i=i.slice(0,79)+"…"),U(i)}}),r()});(async()=>{const n=await K(d);d.use((r,t,e,a)=>{const o=r.status||r.statusCode||500,c=r.message||"Internal Server Error";throw e.status(o).json({message:c}),r}),d.get("env")==="development"?await J(d,n):Z(d);const s=5e3;n.listen(s,"0.0.0.0",()=>{U(`serving on port ${s}`)})})();
